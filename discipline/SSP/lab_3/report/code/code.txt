// BookShelfApp.cs
// Controller class

using System;
using System.IO;
using Gtk;
using Glade;

// Controller class
public class BookShelfApp
{
  [Widget]
  Gtk.Window mainWindow;
  
  [Widget]
  Button createBookRecordButton;

  [Widget]
  Button updateBookRecordButton;

  [Widget]
  Button deleteBookRecordButton;

  [Widget]
  TreeView bookRecordsTreeView;

  [Widget]
  Entry bookTitleEntry;
  
  [Widget]
  Entry bookAuthorEntry;

  [Widget]
  Entry bookYearEntry;

  [Widget]
  TextView bookDescriptionTextView;

  BookShelfModel bookShelfModel = new BookShelfModel();
    
  public static void Main(string[] args)
  {
    new BookShelfApp(args);
  }
  
  public BookShelfApp(string[] args)
  {
    Application.Init();
    
    Glade.XML gxml = new Glade.XML(null, "ui.glade", "mainWindow", null);
    gxml.Autoconnect(this);

    bookRecordsTreeView.AppendColumn("Title", new CellRendererText(), "text", 0);
    bookRecordsTreeView.AppendColumn("Author", new CellRendererText(), "text", 1);
    bookRecordsTreeView.AppendColumn("Year", new CellRendererText(), "text", 2);
    bookRecordsTreeView.Selection.Changed += onReadBookRecord;
    
    Application.Run();
  }
  
  public void onWindowDestroy(object obj, EventArgs args)
  {
    Application.Quit();
  }

  public void onReadBookRecord(object obj, EventArgs args)
  {
    TreeSelection bookRecordSelection = bookRecordsTreeView.Selection;
    
    TreeIter iter;
    TreeModel model;
    
    if (bookRecordSelection.GetSelected(out model, out iter))
      {
        String bookTitle = (String) model.GetValue(iter, 0);
        String bookAuthor = (String) model.GetValue(iter, 1);
        String bookYear = (String) model.GetValue(iter, 2);

        bookTitleEntry.Text = bookTitle;
        bookAuthorEntry.Text = bookAuthor;
        bookYearEntry.Text = bookYear;
        
        String bookDescription = bookShelfModel.getBookDescription(bookTitle);
        bookDescriptionTextView.Buffer.Text = bookDescription;
      }
  }

  public void onCreateBookRecord(object obj, EventArgs args)
  {
    String bookTitle = bookTitleEntry.Text;
    String bookAuthor = bookAuthorEntry.Text;
    String bookYear = bookYearEntry.Text;
    String bookDescription = bookDescriptionTextView.Buffer.Text;

    try
      {
        bookShelfModel.insertBook(bookTitle, bookAuthor, bookYear, bookDescription);        
      }
    catch (ArgumentException)
      {
        MessageDialog md = new MessageDialog(mainWindow,
                                             DialogFlags.DestroyWithParent,
                                             MessageType.Error,
                                             ButtonsType.Close,
                                             "Book title should be unique!");
        md.Run();
        md.Destroy();
      }
    
    bookShelfModel.refreshBookRecordsStore();
  }

  public void onUpdateBookRecord(object obj, EventArgs args)
  {
    TreeSelection bookRecordSelection = bookRecordsTreeView.Selection;
    
    TreeIter iter;
    TreeModel model;

    if (bookRecordSelection.GetSelected(out model, out iter))
      {
        String oldBookTitle = (String) model.GetValue(iter, 0);

        String newBookTitle = bookTitleEntry.Text;
        String newBookAuthor = bookAuthorEntry.Text;
        String newBookYear = bookYearEntry.Text;
        String newBookDescription = bookDescriptionTextView.Buffer.Text;

        try
          {
            bookShelfModel.updateBook(oldBookTitle,
                                      newBookTitle, newBookAuthor,
                                      newBookYear, newBookDescription);
          }
        catch (ArgumentException)
          {
            MessageDialog md = new MessageDialog(mainWindow,
                                                 DialogFlags.DestroyWithParent,
                                                 MessageType.Error,
                                                 ButtonsType.Close,
                                                 "Book title should be unique!");
            md.Run();
            md.Destroy();
          }
       
        bookShelfModel.refreshBookRecordsStore();
      }
    else
      {
        MessageDialog md = new MessageDialog(mainWindow,
                                             DialogFlags.DestroyWithParent,
                                             MessageType.Error,
                                             ButtonsType.Close,
                                             "Please, select book to update!");
        md.Run();
        md.Destroy();
      }
  }

  public void onDeleteBookRecord(object obj, EventArgs args)
  {
    TreeSelection bookRecordSelection = bookRecordsTreeView.Selection;

    TreeIter iter;
    TreeModel model;
    
    if (bookRecordSelection.GetSelected(out model, out iter))
      {
        String bookTitle = (String) model.GetValue(iter, 0);
        bookShelfModel.deleteBook(bookTitle);

        bookShelfModel.refreshBookRecordsStore();
      }
    else
      {
        MessageDialog md = new MessageDialog(mainWindow,
                                             DialogFlags.DestroyWithParent,
                                             MessageType.Error,
                                             ButtonsType.Close,
                                             "Please, select book to delete!");
        md.Run();
        md.Destroy();
      }
  }
  
  public void onChooseDatabase(object obj, EventArgs args)
  {
    Gtk.FileChooserDialog fc =
      new Gtk.FileChooserDialog("Choose books database",
                                mainWindow,
                                FileChooserAction.Open,
                                "Cancel", ResponseType.Cancel,
                                "Open", ResponseType.Accept);

    fc.Filter = new FileFilter();
    fc.Filter.AddPattern("*.sqlite");

    while (fc.Run() == (int) ResponseType.Accept)
      {
        bookShelfModel.openDatabase(fc.Filename);
        bookRecordsTreeView.Model = bookShelfModel.getBookRecordsStore();

        try
          {
            bookShelfModel.refreshBookRecordsStore();            

            createBookRecordButton.Sensitive = true;
            updateBookRecordButton.Sensitive = true;
            deleteBookRecordButton.Sensitive = true;

            break;
          }
        catch (AccessViolationException)
          {
            MessageDialog md = new MessageDialog(mainWindow,
                                                 DialogFlags.DestroyWithParent,
                                                 MessageType.Error,
                                                 ButtonsType.Close,
                                                 "Incorrect database structure! " +
                                                 "Please, select another database");
            md.Run();
            md.Destroy();
          }
      }
    fc.Destroy();
  }
}


// BookShelfModel.cs
// Model class

using System;
using Mono.Data.Sqlite;
using Gtk;

// Model class
public class BookShelfModel
{
  ListStore bookRecordsList = new ListStore(
    typeof(string), // Title
    typeof(string), // Author
    typeof(string)  // Year
  );

  SqliteConnection dbConnection = null;
  
  public void openDatabase(String databasePath)
  {
    String connectionString = "URI=file:" + databasePath;
    dbConnection =  new SqliteConnection(connectionString);
  }

  public ListStore getBookRecordsStore()
  {
    return bookRecordsList;
  }

  public void refreshBookRecordsStore()
  {
    bookRecordsList.Clear();
      
    try
      {           
        dbConnection.Open();

        String queryString = "SELECT Title, Author, Year FROM Books";

        using (SqliteCommand cmd = new SqliteCommand(queryString, dbConnection))
          {
            using (SqliteDataReader rdr = cmd.ExecuteReader())
              {
                while (rdr.Read())
                  {
                    bookRecordsList.AppendValues(rdr["Title"].ToString(),
                                                 rdr["Author"].ToString(),
                                                 rdr["Year"].ToString());                    
                  }
              }
          }
      }
    catch (SqliteException ex)
      {
        Console.WriteLine(ex);
        throw new AccessViolationException("Incorrect database structure", ex);
      }
    finally
      {        
        dbConnection.Close();
      }
  }

  public String getBookDescription(String bookTitle)
  {
    String bookDescription = "";
    try
      {        
        dbConnection.Open();

        String queryString = String.Format("SELECT Description FROM Books WHERE Title='{0}'",
                                           bookTitle);
            
        using (SqliteCommand cmd = new SqliteCommand(queryString, dbConnection))
          {
            using (SqliteDataReader rdr = cmd.ExecuteReader())
              {
                rdr.Read();
                bookDescription = rdr["Description"].ToString();
              }
          }
      }
    catch (SqliteException ex)
      {
        Console.WriteLine(ex);
      }
    finally
      {
        dbConnection.Close();
      }
    
    return bookDescription;
  }

  public void insertBook(String bookTitle, String bookAuthor, String bookYear, String bookDescription)
  {
    try
      {        
        dbConnection.Open();

        String queryString = String.Format("INSERT INTO Books VALUES ('{0}', '{1}', {2}, '{3}')",
                                           escapeQuotes(bookTitle),
                                           escapeQuotes(bookAuthor),
                                           Convert.ToInt32(bookYear),
                                           escapeQuotes(bookDescription));
        
        using (SqliteCommand cmd = new SqliteCommand(queryString, dbConnection))
          {
            cmd.ExecuteNonQuery();
          }
      }
    catch (SqliteException ex)
      {
        Console.WriteLine(ex);
        throw new ArgumentException("Constraint violation", ex);
      }
    finally
      {
        dbConnection.Close();
      }
  }  

  public void updateBook(String oldBookTitle,
                         String newBookTitle, String newBookAuthor,
                         String newBookYear, String newBookDescription)
  {
    try
      {        
        dbConnection.Open();

        String queryString =
          String.Format("UPDATE Books SET Title='{0}', Author='{1}', " +
                        "Year={2}, Description='{3}' WHERE Title='{4}'",
                        escapeQuotes(newBookTitle), escapeQuotes(newBookAuthor), 
                        Convert.ToInt32(newBookYear), escapeQuotes(newBookDescription),
                        escapeQuotes(oldBookTitle));
        
        using (SqliteCommand cmd = new SqliteCommand(queryString, dbConnection))
          {
            cmd.ExecuteNonQuery();
          }
      }
    catch (SqliteException ex)
      {
        throw new ArgumentException("Constraint violation", ex);
        Console.WriteLine(ex);
      }
    finally
      {
        dbConnection.Close();
      }
  }  

  public void deleteBook(String bookTitle)
  {
    try
      {        
        dbConnection.Open();

        String queryString = String.Format("DELETE FROM Books WHERE Title='{0}'",
                                           bookTitle);
            
        using (SqliteCommand cmd = new SqliteCommand(queryString, dbConnection))
          {
            cmd.ExecuteNonQuery();
          }
      }
    catch (SqliteException ex)
      {
        Console.WriteLine(ex);
      }
    finally
      {
        dbConnection.Close();
      }
  }

  private String escapeQuotes(String s)
  {
    return s.Replace("'", "''");
  }
}
