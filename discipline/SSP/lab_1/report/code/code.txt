// C# part
//
// BookShelfApp.cs:

using System;
using System.IO;
using Gtk;
using Glade;

// Controller class
public class BookShelfApp
{
  [Widget]
  Gtk.Window MainWindow;
  
  [Widget]
  Button quitButton;

  [Widget]
  TreeView treeView;

  [Widget]
  TextView textView;

  BookShelfModel bookShelfModel = new BookShelfModel("books", "txt");
    
  public static void Main(string[] args)
  {
    new BookShelfApp(args);
  }
  
  public BookShelfApp(string[] args)
  {
    Application.Init();
    
    Glade.XML gxml = new Glade.XML(null, "ui.glade", "mainWindow", null);
    gxml.Autoconnect(this);

    treeView.AppendColumn("Books", new CellRendererText(), "text", 0);
    treeView.HeadersVisible = true;

    treeView.Selection.Changed += onSelectBook;
    
    treeView.Model = bookShelfModel.bookList;
    
    Application.Run();
  }
  
  public void onWindowDelete(object obj, EventArgs args)
  {
    Application.Quit();
  }

  public void onSelectBook(object obj, EventArgs args)
  {
    TreeIter iter;
    TreeModel model;
    
    if (((TreeSelection) obj).GetSelected(out model, out iter))
      {
        String bookName = (String) model.GetValue(iter, 0);
        String bookDescription = bookShelfModel.getBookDescription(bookName);
        textView.Buffer.Text = bookDescription;
      }
  }

  public void onChooseBookDir(object obj, EventArgs args)
  {
    Gtk.FileChooserDialog fc =
      new Gtk.FileChooserDialog("Choose directory with books",
                                MainWindow,
                                FileChooserAction.SelectFolder,
                                "Cancel",ResponseType.Cancel,
                                "Open",ResponseType.Accept);

    if (fc.Run() == (int) ResponseType.Accept)
      {
        bookShelfModel.bookDir = fc.Filename;
        treeView.Model = bookShelfModel.bookList;
      }

    fc.Destroy();
  }
}

//
// BookShelfModel.cs:
//

using System;
using System.IO;
using Gtk;

// Model class
public class BookShelfModel
{
  String _bookDir;
  String _bookExt;
  ListStore _bookList = new ListStore(typeof(string));
  
  public String bookDir
  {
    get
      {
        return _bookDir;
      }
    set
      {
        _bookDir = value;
      }
  }

  public ListStore bookList
  {
    get
      {
        // drop old records from _bookList
        _bookList.Clear();
       
        DirectoryInfo bookDirInfo = new DirectoryInfo(_bookDir);    
        FileInfo[] books = bookDirInfo.GetFiles("*." + _bookExt);
    
        foreach (FileInfo book in books)
          {
            // drop extension from filename
            String bookName =
              book.Name.Substring(0, book.Name.Length - book.Extension.Length);
        
            _bookList.AppendValues(bookName);
          }

        return _bookList;
      }
  }

  
  public BookShelfModel(String bookDir, String bookExt)
  {
    _bookDir = bookDir;
    _bookExt = bookExt;
  }
  
  public String getBookDescription(String bookName, int numLines = 10, int lineWidth = 72)
  {
    String description = "";

    // append extension
    String fileName = bookName + "." + _bookExt;
    
    // obtain path to book
    String bookPath = Path.Combine(_bookDir, fileName);

    // check, if file exists
    if (!File.Exists(bookPath))
      {
        description = "There is no such book...";
      }
    else
      {
        using (StreamReader sr = File.OpenText(bookPath))
          {
            String curLine;
            for (int i = 0; i < numLines; i++)
              {
                if ((curLine = sr.ReadLine()) != null)
                  {
                    description += curLine + "\n";                    
                  }
                else
                  {
                    break;                    
                  }
              }
          } 
      }
    return description;
  }
}

//
// xml part
//
// ui.glade:

<?xml version="1.0" encoding="UTF-8"?>
<glade-interface>
  <!-- interface-requires gtk+ 2.24 -->
  <!-- interface-naming-policy project-wide -->
  <widget class="GtkWindow" id="mainWindow">
    <property name="visible">True</property>
    <property name="can_focus">False</property>
    <property name="border_width">5</property>
    <property name="title" translatable="yes">Book shelf</property>
    <property name="default_width">400</property>
    <property name="default_height">600</property>
    <signal name="destroy" handler="onWindowDelete" swapped="no"/>
    <child>
      <widget class="GtkVBox" id="vbox1">
        <property name="visible">True</property>
        <property name="can_focus">False</property>
        <child>
          <widget class="GtkHButtonBox" id="hbuttonbox1">
            <property name="visible">True</property>
            <property name="can_focus">False</property>
            <child>
              <widget class="GtkButton" id="button1">
                <property name="label">gtk-open</property>
                <property name="visible">True</property>
                <property name="can_focus">True</property>
                <property name="receives_default">True</property>
                <property name="use_stock">True</property>
                <signal name="clicked" handler="onChooseBookDir" swapped="no"/>
              </widget>
              <packing>
                <property name="expand">False</property>
                <property name="fill">False</property>
                <property name="position">0</property>
              </packing>
            </child>
            <child>
              <widget class="GtkButton" id="quitButton">
                <property name="label">gtk-quit</property>
                <property name="visible">True</property>
                <property name="can_focus">True</property>
                <property name="receives_default">True</property>
                <property name="use_stock">True</property>
                <signal name="clicked" handler="onWindowDelete" swapped="no"/>
              </widget>
              <packing>
                <property name="expand">True</property>
                <property name="fill">True</property>
                <property name="pack_type">end</property>
                <property name="position">1</property>
              </packing>
            </child>
          </widget>
          <packing>
            <property name="expand">False</property>
            <property name="fill">False</property>
            <property name="pack_type">end</property>
            <property name="position">0</property>
          </packing>
        </child>
        <child>
          <widget class="GtkScrolledWindow" id="scrolledwindow2">
            <property name="visible">True</property>
            <property name="can_focus">True</property>
            <property name="hscrollbar_policy">never</property>
            <property name="vscrollbar_policy">automatic</property>
            <child>
              <widget class="GtkTextView" id="textView">
                <property name="visible">True</property>
                <property name="can_focus">True</property>
                <property name="editable">False</property>
                <property name="wrap_mode">word</property>
              </widget>
            </child>
          </widget>
          <packing>
            <property name="expand">True</property>
            <property name="fill">True</property>
            <property name="pack_type">end</property>
            <property name="position">1</property>
          </packing>
        </child>
        <child>
          <widget class="GtkScrolledWindow" id="scrolledwindow1">
            <property name="height_request">200</property>
            <property name="visible">True</property>
            <property name="can_focus">True</property>
            <property name="hscrollbar_policy">never</property>
            <property name="vscrollbar_policy">automatic</property>
            <child>
              <widget class="GtkTreeView" id="treeView">
                <property name="height_request">200</property>
                <property name="visible">True</property>
                <property name="can_focus">True</property>
              </widget>
            </child>
          </widget>
          <packing>
            <property name="expand">True</property>
            <property name="fill">True</property>
            <property name="pack_type">end</property>
            <property name="position">2</property>
          </packing>
        </child>
      </widget>
    </child>
  </widget>
</glade-interface>
